// approximate PI using L.J.Lange continued fraction
// https://www.jstor.org/stable/2589152

.decl q1(pi:float)
.output q1

// unroll a bit
q1(pi) :-
    pi = 3 + 1 /
        (6 + (3*3) /
            (6 + (5*5) /
                (6 + (7*7) /
                    (6 + (9*9))
                )
            )
        )
    .

.decl seq(i:number, v:float)
.decl q2(pi: float)
.output q2

// compute up to fraction depth
#define DEPTH 100
#define ITERATIONS (DEPTH*2+1)

seq(ITERATIONS,1.0).
seq(i,v) :-
    i = range(3,ITERATIONS),
    i % 2 = 1,
    v = (6.0 + to_float(i*i) / vv),
    seq(i+2, vv).

q2(pi) :-
    pi = 3.0 + 1.0 / v,
    seq(3,v).


